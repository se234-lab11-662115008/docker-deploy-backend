name: Deploy backend to host

'on':
  push:
    branches:
      - main

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Setup Java
      - name: setup java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      # Step 3: Run Maven to build the project and unzip the jar
      - name: run maven
        run: |
          mvn clean install -DskipTests -B
          mkdir -p target/dependency && (cd target/dependency; unzip ../*.jar)

      # Step 4: Set up QEMU for multi-architecture builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Step 5: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 6: Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Step 7: Prepare the docker-compose run (optional step to inspect)
      - name: prepare the docker-compose run
        run: |
          ls -l

      # Step 8: Build and Push Docker Image
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: kengchayodom/234-deploylab-backend:latest

      # Step 9: Copy docker-compose.yml file to the server using SCP
      - name: copy file via ssh password
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST_SERVER }}
          username: ${{ secrets.HOST_USER_NAME }}
          key: ${{ secrets.HOST_SSH_PRIVATE_KEY }}
          port: 22
          source: "docker-compose.yml"
          target: "/home/ubuntu/backend"

      # Step 10: Deploy using Docker Compose on the server
      - name: docker compose
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.HOST_SERVER }}
          username: ${{ secrets.HOST_USER_NAME }}
          key: ${{ secrets.HOST_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd /home/ubuntu/backend
            echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
            docker compose down
            docker compose pull
            docker compose up -d
            rm -rf /home/ubuntu/backend
